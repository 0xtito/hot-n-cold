"use client";

/**
 * This code was generated by v0 by Vercel.
 * Big W for Vercel.
 * @see https://v0.dev/t/IeYI0zKLess
 */
import { useState } from "react";
import { useRouter } from "next/navigation";
// import { useRouter } from "next/navigation";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  // DialogClose,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { ToastAction } from "@/components/ui/toast";
import { toast } from "@/components/ui/use-toast";
import { gameNames } from "@/lib/constants";
import type { GameNames } from "@/lib/types";
import { useZkArcade } from "@/lib/zkArcadeStore";
import { api } from "@/trpc/react";
import { useUser } from "@clerk/nextjs";
import { ChevronDownIcon } from "@heroicons/react/24/outline";

interface FriendProfileDialogProps {
  username: string;
  imageUrl: string;
  id: string;
}

export default function FriendProfileDialog({
  username,
  imageUrl,
  id: friendId,
}: FriendProfileDialogProps) {
  const router = useRouter();
  const { matchPath } = useZkArcade();
  const [open, setOpen] = useState(false);
  const { user } = useUser();
  const friendshipMutation = api.friendships.deleteFriend.useMutation();
  const inviteMutation = api.games.sendGameInvite.useMutation();

  const handleDeleteFriend = async () => {
    if (!user) {
      return;
    }

    setOpen(false);

    toast({
      title: `Deleting ${username}`,
      description: `Please wait while we delete ${username} from your friends list.`,
      variant: "default",
      duration: 3000,
    });

    await friendshipMutation.mutateAsync({
      userId: user.id,
      friendId,
    });

    toast({
      title: "Friend Deleted",
      description: `You have deleted ${username} from your friends list.`,
      variant: "destructive",
      duration: 5000,
    });
  };

  const handleInviteToGame = (gameName: GameNames) => {
    if (!user) {
      return;
    }

    if (!user.username) {
      return;
    }

    if (gameName !== "Hot 'n Cold") {
      toast({
        title: `Unable to Invite`,
        description: `Game still in development.`,
        variant: "destructive",
        duration: 3000,
      });

      return;
    }

    toast({
      title: `Inviting ${username}`,
      description: `Please stay on the page`,
      variant: "default",
      duration: 3000,
    });

    const mathPathArr = matchPath.split("/");

    const lobbyId = mathPathArr[mathPathArr.length - 1];

    if (!lobbyId) {
      console.log("matchPath: ", matchPath);
      throw new Error("FriendProfileDialog: No lobby id found");
    }

    inviteMutation.mutate({
      senderUsername: user.username,
      receiverId: friendId,
      lobbyId,
    });

    toast({
      title: `Invite Sent to ${username}!`,
      description: `Redirecting to lobby now...`,
      variant: "default",
      duration: 1000,
      action: <ToastAction altText="Dismiss">Dismiss</ToastAction>,
    });

    router.push(matchPath);
  };

  return (
    <Dialog key={friendId} open={open}>
      <DialogTrigger asChild>
        <Badge
          variant="secondary"
          className="rounded-full px-2.5 py-0.5 text-xs font-semibold shadow-sm hover:cursor-pointer"
          onPointerDown={(e) => {
            e.preventDefault();
            setOpen(true);
          }}
        >
          View
        </Badge>
      </DialogTrigger>
      <DialogContent
        onOpenAutoFocus={(e) => e.preventDefault()}
        onInteractOutside={(e) => {
          e.preventDefault();
          setOpen(false);
        }}
        onEscapeKeyDown={() => setOpen(false)}
        onDialogCloseButton={() => setOpen(false)}
        className="outline-none"
      >
        <DialogHeader>
          <div className="flex items-center justify-start gap-4">
            <Avatar>
              <AvatarImage alt={username} src={imageUrl} />
              <AvatarFallback>UN</AvatarFallback>
            </Avatar>
            <div>
              <DialogTitle>@{username}</DialogTitle>
            </div>
          </div>
        </DialogHeader>
        <DialogFooter className="flex justify-between ring-0">
          <AlertDialog>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button className="ml-2 flex-1">
                  Invite
                  <ChevronDownIcon className="relative mt-0.5 inline-flex w-3" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-56">
                <DropdownMenuLabel>Invite to:</DropdownMenuLabel>
                <DropdownMenuSeparator />
                {gameNames
                  .filter((name) => name !== "Sandbox")
                  .map((gameName) => (
                    <DropdownMenuItem
                      disabled={gameName !== "Hot 'n Cold"}
                      key={gameName}
                      className={
                        gameName === "Hot 'n Cold" ? "cursor-pointer" : ""
                      }
                      onClick={() => handleInviteToGame(gameName)}
                    >
                      {gameName === "Hot 'n Cold"
                        ? gameName
                        : `${gameName} (Coming Soon)`}
                    </DropdownMenuItem>
                  ))}
              </DropdownMenuContent>
            </DropdownMenu>
            <AlertDialogTrigger asChild>
              <Button variant="destructive" className="w-fit">
                Delete Friend
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>
                  Are you sure? You are about to delete {username}
                </AlertDialogTitle>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel className="flex w-1/2">No</AlertDialogCancel>
                <AlertDialogAction
                  type="button"
                  className="flex w-1/2"
                  onPointerDown={() => handleDeleteFriend()}
                >
                  Yes
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
