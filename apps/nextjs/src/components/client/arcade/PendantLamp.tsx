"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React from "react";
import { SpotLight, useGLTF, useHelper } from "@react-three/drei";
import { SpotLightHelper } from "three";
import type { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    mesh: THREE.Mesh;
  };
  materials: {
    base_material: THREE.MeshStandardMaterial;
  };
};

type PendantLampGroupProps = JSX.IntrinsicElements["group"];

interface PendantLampProps extends PendantLampGroupProps {
  arcadeMachine: React.RefObject<THREE.Object3D<THREE.Object3DEventMap>>;
  // props: JSX.IntrinsicElements["group"];
}

function PendantLamp({ arcadeMachine: _, ...props }: PendantLampProps) {
  // const depthBuffer = useDepthBuffer();
  const spotLight = React.useRef<THREE.SpotLight>(null!);
  const { nodes, materials } = useGLTF(
    "./assets/pandantLamp.glb",
  ) as GLTFResult;

  useHelper(spotLight, SpotLightHelper, 1);

  // console.log(arcadeMachine);

  // if (!arcadeMachine.current) return;

  console.log("light geometry", nodes.mesh.geometry);
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.mesh.geometry}
        material={materials.base_material}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.618}
        position-y={0.35}
      />
      <SpotLight
        // depthBuffer={depthBuffer}
        position-y={0.2} // Position of the light source
        angle={Math.PI / 7} // Width of the light cone (in radians)
        anglePower={3}
        penumbra={1} // Softness of the light edge (0 to 1)
        intensity={0.5} // Brightness of the light
        castShadow // Enable shadows
        color={"white"} // Color of the light
        // distance={4}
        attenuation={5}
        // debug
      />
    </group>
  );
}

useGLTF.preload("./assets/pandantLamp.glb");

export default PendantLamp;
