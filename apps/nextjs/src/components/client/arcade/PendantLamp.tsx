"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useEffect, useState } from "react";
import { SpotLight, useGLTF, useHelper } from "@react-three/drei";
import { Object3D, SpotLightHelper, Vector3 } from "three";
import type { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    mesh: THREE.Mesh;
  };
  materials: {
    base_material: THREE.MeshStandardMaterial;
  };
};

type PendantLampGroupProps = JSX.IntrinsicElements["group"];

interface PendantLampProps extends PendantLampGroupProps {
  arcadeMachine?: React.RefObject<THREE.Object3D<THREE.Object3DEventMap>>;
  // props: JSX.IntrinsicElements["group"];
}

function PendantLamp({ arcadeMachine, ...props }: PendantLampProps) {
  // const depthBuffer = useDepthBuffer();
  const [target] = useState(() => new Object3D());
  const [targetLight, setTargetLight] = useState<THREE.Vector3>(new Vector3());
  const spotLight = React.useRef<THREE.SpotLight>(null!);
  const groupRef = React.useRef<THREE.Group>(null);
  const { nodes, materials } = useGLTF(
    "./assets/pandantLamp.glb",
  ) as GLTFResult;

  useHelper(spotLight, SpotLightHelper, 1);

  useEffect(() => {
    if (groupRef.current) {
      console.log(groupRef.current.position);
      setTargetLight((cur) => {
        if (groupRef.current) {
          return cur.set(
            groupRef.current.position.x,
            0,
            groupRef.current.position.z,
          );
        } else {
          return cur.set(0, 0, 0);
        }
      });
    }
  }, []);

  if (!arcadeMachine?.current) {
    return null;
  }

  return (
    <>
      <group ref={groupRef} {...props} dispose={null}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mesh.geometry}
          material={materials.base_material}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.3}
          position-y={0.35}
        />
        <SpotLight
          target={target}
          position-y={0.2}
          angle={Math.PI / 7}
          anglePower={3}
          penumbra={1}
          intensity={0.3}
          castShadow
          color={"white"}
          // distance={2}
          attenuation={5}
          // debug
        />
        <primitive object={target} position={targetLight} />
      </group>
    </>
  );
}

useGLTF.preload("./assets/pandantLamp.glb");

export default PendantLamp;
