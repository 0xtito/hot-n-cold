"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { forwardRef, useImperativeHandle } from "react";
import { useGLTF } from "@react-three/drei";
import type { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    mesh: THREE.Mesh;
  };
  materials: {
    base_material: THREE.MeshStandardMaterial;
  };
};

type ArcadeMachineGroup = JSX.IntrinsicElements["group"];

interface ArcadeMachineProps extends ArcadeMachineGroup {
  // arcadeMachine: React.RefObject<THREE.Object3D<THREE.Object3DEventMap>>;
  // props: JSX.IntrinsicElements["group"];
  loadingManager?: THREE.LoadingManager;
}

const ArcadeMachine = forwardRef<
  React.RefObject<THREE.Mesh>,
  ArcadeMachineProps
>(({ loadingManager: _, ...props }, ref) => {
  const arcadeMachineRef = React.useRef<THREE.Mesh>(null);
  const { nodes, materials } = useGLTF(
    "./assets/arcadeMachine.glb",
  ) as GLTFResult;
  useImperativeHandle(ref, () => arcadeMachineRef);
  return (
    <group {...props} dispose={null}>
      <mesh
        ref={arcadeMachineRef}
        castShadow
        receiveShadow
        geometry={nodes.mesh.geometry}
        material={materials.base_material}
        rotation={[Math.PI / 2, 0, Math.PI / 2]}
        scale={0.632}
      />
    </group>
  );
});

ArcadeMachine.displayName = "ArcadeMachine";

useGLTF.preload("./assets/arcadeMachine.glb");

export default ArcadeMachine;
